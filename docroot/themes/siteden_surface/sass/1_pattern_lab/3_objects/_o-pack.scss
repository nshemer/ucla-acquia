//------------------------------------
//  Pack Object
//------------------------------------

// Forces all elements in a region to stay in a horizontal row and
// fill an equal, fluid width of their parent.
//
// Adapted from [Inuit CSS](https://github.com/inuitcss)
// @link https://github.com/inuitcss/objects.pack/blob/master/_objects.pack.scss

// Pack Object: Initial Spacing unit
$o-pack-spacer:          1rem !default;
// Pack Object: Default Spacing unit which should be half since it is applied to
// 2 items side by side.
$o-pack-spacer--default: $o-pack-spacer / 2 !default;
// Pack Object: Tiny Spacing unit
$o-pack-spacer--tiny:    $o-pack-spacer--default / 4 !default;
// Pack Object: Small Spacing unit
$o-pack-spacer--small:   $o-pack-spacer--default / 2 !default;
// Pack Object: Large Spacing unit
$o-pack-spacer--large:   $o-pack-spacer--default * 2 !default;
// Pack Object: Huge Spacing unit
$o-pack-spacer--huge:    $o-pack-spacer--default * 4 !default;

// Pack Object: Enable the `flush` modifier class
$o-pack-enable--flush:   false !default;
// Pack Object: Enable the `tiny` modifier class
$o-pack-enable--tiny:    false !default;
// Pack Object: Enable the `small` modifier class
$o-pack-enable--small:   false !default;
// Pack Object: Enable the `large` modifier class
$o-pack-enable--large:   false !default;
// Pack Object: Enable the `huge` modifier class
$o-pack-enable--huge:    false !default;
// Pack Object: Enable the `auto` modifier class
$o-pack-enable--auto:    false !default;
// Pack Object: Enable the `rev` modifier class
$o-pack-enable--rev:     false !default;

// @example markup
// <div class="o-pack">
//   <p>content</p>
//   <p>content</p>
// </div>
@mixin o-pack() {
  width: 100%; // Fill all available space.
  display: flex;
  flex-wrap: nowrap;
  justify-content: space-between;

  > * {
    display: block;
    flex-basis: 0;
    flex-grow: 1;
    min-width: 0; // Fix for firefox - http://stackoverflow.com/questions/31967019/max-width-doesnt-work-in-flexbox
    margin-left: $o-pack-spacer--default;
    margin-right: $o-pack-spacer--default;
  }

  // Remove the space on the Left.
  > :first-child {
    margin-left: 0;
  }

  // Remove the space on the Right.
  > :last-child {
    margin-right: 0;
  }
}

// Pack Object: Auto `Modifier`
//
// Cause children to pack up into available space, but not equally sized.
@mixin o-pack--auto() {
  > * {
    flex-basis: auto;
  }
}

// Pack Object: Reverse `Modifier`
//
// Reverse the direction of `.o-pack_item` elements to right-to-left.
@mixin o-pack--rev() {
  flex-direction: row-reverse;

  > :first-child {
    margin-left: $o-pack-spacer--default;
    margin-right: 0;
  }

  > :last-child {
    margin-left: 0;
    margin-right: $o-pack-spacer--default;
  }
}

// Pack Object: Tiny `Modifier`
//
// Adds tiny gutters between items.
@mixin o-pack--tiny($component) {
  > * {
    margin-left: $o-pack-spacer--tiny;
    margin-right: $o-pack-spacer--tiny;
  }

  &.#{$component}--rev {
    > :first-child {
      margin-left: $o-pack-spacer--tiny;
      margin-right: 0;
    }

    > :last-child {
      margin-left: 0;
      margin-right: $o-pack-spacer--tiny;
    }
  }
}

// Pack Object: Small `Modifier`
//
// Adds small gutters between items.
@mixin o-pack--small($component) {
  > * {
    margin-left: $o-pack-spacer--small;
    margin-right: $o-pack-spacer--small;
  }

  &.#{$component}--rev {
    > :first-child {
      margin-left: $o-pack-spacer--small;
      margin-right: 0;
    }

    > :last-child {
      margin-left: 0;
      margin-right: $o-pack-spacer--small;
    }
  }
}

// Pack Object: Large `Modifier`
//
// Adds large gutters between items.
@mixin o-pack--large($component) {
  > * {
    margin-left: $o-pack-spacer--large;
    margin-right: $o-pack-spacer--large;
  }

  &.#{$component}--rev {
    > :first-child {
      margin-left: $o-pack-spacer--large;
      margin-right: 0;
    }

    > :last-child {
      margin-left: 0;
      margin-right: $o-pack-spacer--large;
    }
  }
}

// Pack Object: Huge `Modifier`
//
// Adds huge gutters between items.
@mixin o-pack--huge($component) {
  > * {
    margin-left: $o-pack-spacer--huge;
    margin-right: $o-pack-spacer--huge;
  }

  &.#{$component}--rev {
    > :first-child {
      margin-left: $o-pack-spacer--huge;
      margin-right: 0;
    }

    > :last-child {
      margin-left: 0;
      margin-right: $o-pack-spacer--huge;
    }
  }
}

// Pack Object: Auto `Modifier`
//
// Remove margin from children.
@mixin o-pack--flush() {
  > * {
    margin-left: 0;
    margin-right: 0;
  }
}

// Pack Object: Remove a Pack Object styles
//
// Remove the `.o-pack` from a region. This is useful when in mobile you might
// want to have everything align vertically instead of packed horizontally.
// as the `.o-pack` class
@mixin o-pack--removal() {
  flex-wrap: wrap;

  > * {
    flex-basis: auto;
  }
}

// Assign placeholders to classes
.o-pack {
  @include o-pack();
}

@if ($o-pack-enable--auto == true) {
  .o-pack--auto {
    @include o-pack--auto();
  }
}

@if ($o-pack-enable--rev == true) {
  .o-pack--rev {
    @include o-pack--rev();
  }
}

@if ($o-pack-enable--tiny == true) {
  .o-pack--tiny {
    @include o-pack--tiny("o-pack");
  }
}

@if ($o-pack-enable--small == true) {
  .o-pack--small {
    @include o-pack--small("o-pack");
  }
}

@if ($o-pack-enable--large == true) {
  .o-pack--large {
    @include o-pack--large("o-pack");
  }
}

@if ($o-pack-enable--huge == true) {
  .o-pack--huge {
    @include o-pack--huge("o-pack");
  }
}

@if ($o-pack-enable--flush == true) {
  .o-pack--flush {
    @include o-pack--flush();
  }
}
